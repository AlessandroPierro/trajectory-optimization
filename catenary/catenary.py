# Importing numerical libraries
import numpy as np
from scipy import optimize

# Importing plotting libraries
from bokeh.plotting import figure, show
from bokeh.io import export_png

export = False

def solve_NLP(N):

    # Defining problem bound conditions

    a = 0
    b = 10

    x_start = 5
    x_end = 7.5

    L = 15

    t = np.linspace(a, b, num=N)

    h = t[1:N] - t[0:N-1]
    h_mean = (b-1) / (N-1)

    # Defining the objective function (using trapezoidal quadrature)

    def objective_function(X):
        return (h_mean/2) * (X[0]*np.sqrt(1+X[N]**2) +2*np.sum(np.dot(X[1:N-1], np.sqrt(1+np.power(X[N+1:2*N-1], 2))))+X[N-1]*np.sqrt(1+X[2*N-1]**2))

    # Setting bound conditions

    lb = np.full(2*N, -np.inf, dtype=float)
    ub = np.full(2*N, +np.inf, dtype=float)

    lb[0] = x_start
    ub[0] = x_start
    lb[N-1] = x_end
    ub[N-1] = x_end

    bounds = optimize.Bounds(lb, ub)

    # Setting dynamics & total length constraints

    constraints = []

    for i in range(N-1):
        def fun_position(X, i=i): return X[i+1] - \
            X[i] - 0.5 * h[i] * (X[N+i+1] + X[N+i])
        const_position = {"fun": fun_position, "type": "eq"}
        constraints.append(optimize.NonlinearConstraint(fun_position, 0, 0))

    def total_length(X):
        return (h_mean/2) * (np.sqrt(1+X[N]**2) +2*np.sum(np.sqrt(1+np.power(X[N+1:2*N-1],2)))+ np.sqrt(1+X[2*N-1]**2)) - L

    const_total_length = {"fun": total_length, "type": "eq"}
    constraints.append(optimize.NonlinearConstraint(total_length, 0, 0))

    # Setting an initial guess

    initial_guess = np.zeros(2*N)
    z = np.linspace(a, b, num=N)
    initial_guess[0:N] = 0.1*np.power(z,2)-0.75*z+5
    #initial_guess[N:2*N] = 1

    # Utility function called at the end of each iteration of the optimizer

    def callback(a):
        print()

    # Solving the optimization problem

    res = optimize.minimize(
        objective_function,
        initial_guess,
        method='trust-constr',
        bounds=bounds,
        constraints=constraints,
        options={'maxiter':10000, 'xtol': 1e-8}
    )

    # Returning optimization results

    x = res.x[0:N]
    u = res.x[N:2*N]

    print(res.message)
    print(total_length(res.x))

    return t, x, u


if __name__ == '__main__':

    t, x, u = solve_NLP(20)

    z = np.linspace(0, 1, num=1000)

    x_real = 0,0.101010101010101,0.202020202020202,0.303030303030303,0.404040404040404,0.505050505050505,0.606060606060606,0.707070707070707,0.808080808080808,0.909090909090909,1.01010101010101,1.11111111111111,1.21212121212121,1.31313131313131,1.41414141414141,1.51515151515152,1.61616161616162,1.71717171717172,1.81818181818182,1.91919191919192,2.02020202020202,2.12121212121212,2.22222222222222,2.32323232323232,2.42424242424242,2.52525252525253,2.62626262626263,2.72727272727273,2.82828282828283,2.92929292929293,3.03030303030303,3.13131313131313,3.23232323232323,3.33333333333333,3.43434343434343,3.53535353535354,3.63636363636364,3.73737373737374,3.83838383838384,3.93939393939394,4.04040404040404,4.14141414141414,4.24242424242424,4.34343434343434,4.44444444444444,4.54545454545455,4.64646464646465,4.74747474747475,4.84848484848485,4.94949494949495,5.05050505050505,5.15151515151515,5.25252525252525,5.35353535353535,5.45454545454545,5.55555555555556,5.65656565656566,5.75757575757576,5.85858585858586,5.95959595959596,6.06060606060606,6.16161616161616,6.26262626262626,6.36363636363636,6.46464646464646,6.56565656565657,6.66666666666667,6.76767676767677,6.86868686868687,6.96969696969697,7.07070707070707,7.17171717171717,7.27272727272727,7.37373737373737,7.47474747474747,7.57575757575758,7.67676767676768,7.77777777777778,7.87878787878788,7.97979797979798,8.08080808080808,8.18181818181818,8.28282828282828,8.38383838383838,8.48484848484848,8.58585858585859,8.68686868686869,8.78787878787879,8.88888888888889,8.98989898989899,9.09090909090909,9.19191919191919,9.29292929292929,9.39393939393939,9.49494949494949,9.5959595959596,9.6969696969697,9.7979797979798,9.8989898989899,10
    y_real = 5,4.80604814797474,4.61902862663003,4.43874806755269,4.2650200700644,4.09766500849314,3.93650984644964,3.78138795791681,3.63213895496711,3.48860852192983,3.35064825583677,3.21811551298129,3.0908732614322,2.96878993934985,2.85173931895817,2.73960037603161,2.63225716476252,2.52959869787919,2.43151883189084,2.33791615734075,2.24869389395423,2.16375979057287,2.08302602977162,2.00640913706019,1.93382989457481,1.86521325917105,1.80048828483315,1.73958804931958,1.68244958496889,1.62901381359445,1.57922548540072,1.5330331218578,1.49038896247538,1.45124891542084,1.41557251193061,1.38332286446759,1.35446662858137,1.32897396843181,1.3068185259403,1.28797739353696,1.27243109047534,1.26016354269036,1.25116206617862,1.24541735388373,1.24292346607334,1.24367782419776,1.24768120822388,1.25493775744159,1.26545497474365,1.27924373438319,1.29631829321723,1.31669630544743,1.34039884087369,1.36745040667915,1.39787897276941,1.43171600069189,1.46899647616546,1.50975894525383,1.55404555422017,1.60190209310416,1.65337804306647,1.70852662754972,1.7674048673087,1.83007363936692,1.8965977399602,1.96704595153262,2.041491113854,2.12001019933238,2.20268439259946,2.28959917445132,2.38084441023103,2.47651444274479,2.57670818980739,2.68152924651811,2.79108599237264,2.90549170332177,3.02486466889288,3.14932831449505,3.27901132903453,3.41404779797235,3.55457734196166,3.70074526120818,3.85270268570307,4.01060673148338,4.17462066308188,4.34491406233401,4.52166300371667,4.70505023640001,4.89526537320054,5.09250508663086,5.29697331224877,5.50888145951597,5.72844863038442,5.95590184583627,6.19147628061174,6.43541550636748,6.68797174351698,6.94940612201322,7.21998895134347,7.50000000001514


    # Plotting curve x(t)
    p = figure(x_axis_label='Time t', y_axis_label='Position x(t)')
    p.toolbar_location = None
    p.line(x_real, y_real, line_width=2, line_color="orange")
    p.circle(t, x, line_width=2)
    #z = np.linspace(0, 10, num=20) 
    #p.line(z, 0.1*np.power(z,2)-0.75*z+5, line_color="red")
    if export:
        export_png(p, filename="problema_test_position.png", width=400, height=250)
    else:
        show(p)

    #   Plotting control function u(t)
    p = figure(x_axis_label='Time t', y_axis_label='Control u(t)')
    p.toolbar_location = None
    p.circle(t, u, line_width=2)
    if export:
        export_png(p, filename="problema_test_control.png", width=400, height=250)
    else:
        show(p)